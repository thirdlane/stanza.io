{
  "name": "xmpp-jid",
  "description": "Parse XMPP URIs",
  "version": "1.2.2",
  "author": {
    "name": "Lance Stout",
    "email": "lance@andyet.net"
  },
  "browser": {
    "./lib/stringprep.js": "./lib/stringprep-browser.js"
  },
  "bugs": {
    "url": "https://github.com/otalk/xmpp-jid/issues"
  },
  "dependencies": {
    "punycode": "^1.3.0",
    "node-stringprep": "^0.7.0"
  },
  "optionalDependencies": {
    "node-stringprep": "^0.7.0"
  },
  "devDependencies": {
    "browserify": "^9.0.0",
    "jshint": "^2.6.3",
    "make-better": "^0.4.1",
    "nsp": "^1.0.0",
    "precommit-hook": "^2.0.0",
    "tap-spec": "^2.0.0",
    "tape": "^3.0.3",
    "uglify-js": "^2.4.15"
  },
  "homepage": "https://github.com/otalk/xmpp-jid",
  "keywords": [
    "jid",
    "uri",
    "xmpp"
  ],
  "license": "MIT",
  "main": "./index.js",
  "typings": "./index.d.ts",
  "repository": {
    "type": "git",
    "url": "https://github.com/otalk/xmpp-jid.git"
  },
  "scripts": {
    "test": "make test"
  },
  "testling": {
    "files": [
      "test/index.js"
    ],
    "browsers": [
      "ie/10..latest",
      "chrome/20..latest",
      "chrome/canary",
      "firefox/10..latest",
      "firefox/nightly",
      "opera/next",
      "safari/6..latest",
      "iphone/6..latest",
      "ipad/6..latest",
      "android-browser/4.2..latest"
    ]
  },
  "readme": "# XMPP-JID\n**Parse and Create XMPP JIDs**\n\n[![Build Status](https://travis-ci.org/otalk/xmpp-jid.png)](https://travis-ci.org/otalk/xmpp-jid)\n[![Dependency Status](https://david-dm.org/otalk/xmpp-jid.png)](https://david-dm.org/otalk/xmpp-jid)\n[![devDependency Status](https://david-dm.org/otalk/xmpp-jid/dev-status.png)](https://david-dm.org/otalk/xmpp-jid#info=devDependencies)\n\n[![Browser Support](https://ci.testling.com/otalk/xmpp-jid.png)](https://ci.testling.com/otalk/xmpp-jid)\n\n## What is this?\n\nThe `xmpp-jid` module is for both parsing and creating XMPP addresses, which are called JIDs.\n\nA JID often looks a lot like an email address with a `user@host` form, but there's more to it:\n\n```\n        full JID\n/                       \\\n[local@]domain[/resource]\n\\            /\n   bare JID\n```\n\nA JID can be composed of a local part, a domain part, and a resource part. The domain part is\nmandatory for all JIDs, and can even stand alone (e.g., as the address for a server).\n\nThe combination of a local (user) part and a domain is called a \"bare JID\", and it is used\nto identitfy a particular account at a server.\n\nA JID that includes a resource is called a \"full JID\", and it is used to identify a particular\nclient connection (i.e., a specific connection for the associated \"bare JID\" account).\n\n## Installing\n\n```sh\n$ npm install xmpp-jid\n```\n\n## Building bundled/minified version (for AMD, etc)\n\n```sh\n$ make\n```\n\nThe bundled and minified files will be in the generated `build` directory.\n\n## Usage\n\n```javascript\nvar jid = require('xmpp-jid');\n\nvar res = new jid.JID('user@example.com');\n// or jid.create('user@example.com/res');\n//\n// res == {\n//     local: 'user',\n//     domain: 'example.com',\n//     resource: 'res',\n//     bare: 'user@example.com',\n//     full: 'user@example.com/res',\n//     unescapedLocal: 'user',\n//     unescapedBare: 'user@example.com',\n//     unescapedFull: 'user@example.com/res',\n//     prepped: true\n// }\n```\n\n## StringPrep\n\nCorrectly working with JIDs can be slightly tricky thanks to Unicode, which requires us\nto use StringPrep to normalize the individual parts of a JID so that we can safely use\nthem in comparisons. Unfortunately, we don't have access to StringPrep in browsers, so\nall `JID` objects are marked with a `prepped` attribute indicating if StringPrep has\nbeen applied.\n\nComparisons between JIDs should only be trusted if both JIDs have `prepped` set to `true`.\n\nThe provided `equal` function can be used to reliably check that two JIDs are equivalent,\nwith an optional parameter to disable the `prepped` flag check.\n\n```javascript\njid.equal('user@example.com/res', 'USER@EXAMPLE.COM/res');\n// true, if StringPrep is available\n\n\njid.equal('user@example.com/res', 'USER@EXAMPLE.COM/res', false);\n// true\n\njid.equal('user@example.com/res1', 'user@example.com/res2');\n// false, full JIDs don't match\n```\n\nThe same applies for the provided `equalBare` function, which checks that two\nJIDs have the same \"bare JID\" form (i.e., it ignores differences in resources).\n\n```javascript\njid.equal('user@example.com/resource1', 'USER@EXAMPLE.COM/resource2');\n// true, if StringPrep is available\n\n\njid.equal('user@example.com/resource1', 'USER@EXAMPLE.COM/resource2', false);\n// true\n\njid.equal('user@example.com/resource1', 'otheruser@EXAMPLE.COM/resource2', false);\n// false, bare JIDs don't match\n```\n\nEven in the browser, there are ways to ensure that StringPrep is applied by getting\nyour XMPP server to do the prepping for you. This is already done for the standard\nstanza routing attributes (`\"to\"` and `\"from\"`), and other places where the server\ncan reliably ensure that the JIDs are prepped (e.g., roster entries).\n\nIn other cases, you may need to use [XEP-0328: JID Prep](http://xmpp.org/extensions/xep-0328.html)\nto explicity ask your server to prep a given JID.\n\n## JID Escaping\n\n[XEP-0106: JID Escaping](http://xmpp.org/extensions/xep-0106.html) allows you to create JIDs\nusing characters typically prohibited in the local part: `\"' <:>&@`\n\nWhen creating a new JID by specifying the local part separately (e.g. `new JID('localpart', 'domain')`),\nthe local part will be automatically escaped where necessary. \n\n(Using `new JID('local@domain')` will **not**\nescape the local part, as that is assumed to already be the escaped form.)\n\nThese fields on the resulting `JID` object yield the human-presentable, unescaped forms:\n\n- `unescapedLocal`\n- `unescapedBare`\n- `unescapedFull`\n\nIf you show the unescaped forms *anywhere* to a user, you should do so *everywhere* to be consistent and\nprevent potential security issues related to JID spoofing.\n\n## License\n\nMIT\n\n## Created By\n\nIf you like this, follow [@lancestout](http://twitter.com/lancestout) on twitter.\n",
  "readmeFilename": "README.md",
  "_id": "xmpp-jid@1.2.2",
  "_from": "xmpp-jid@^1.1.1"
}
