{
  "name": "jingle",
  "description": "Generic Jingle via WebRTC session manager.",
  "version": "1.7.1",
  "author": {
    "name": "Lance Stout",
    "email": "lance@andyet.net"
  },
  "bugs": {
    "url": "https://github.com/otalk/jingle.js/issues"
  },
  "contributors": [
    {
      "name": "Philipp Hancke",
      "email": "fippo@andyet.net"
    },
    {
      "name": "Lloyd Watkin"
    }
  ],
  "dependencies": {
    "extend-object": "^1.0.0",
    "intersect": "^0.1.0",
    "jingle-filetransfer-session": "^1.1.6",
    "jingle-media-session": "^1.1.1",
    "jingle-session": "^1.0.0",
    "webrtcsupport": "^1.1.0",
    "wildemitter": "^1.0.1"
  },
  "devDependencies": {
    "browserify": "^7.0.2",
    "covert": "^1.0.0",
    "jshint": "^2.5.5",
    "nsp": "^0.5.2",
    "precommit-hook": "^1.0.7",
    "tap-spec": "^0.2.1",
    "tape": "^2.14.0",
    "testling": "^1.7.1",
    "travis-multirunner": "^2.5.0",
    "uglify-js": "^2.4.15",
    "webrtc-adapter-test": "^0.1.4"
  },
  "homepage": "https://github.com/otalk/jingle.js",
  "keywords": [
    "webrtc",
    "xmpp",
    "jingle"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/otalk/jingle.js.git"
  },
  "scripts": {
    "audit": "make audit",
    "build": "make build",
    "test-travis": "test/run-tests"
  },
  "testling": {
    "files": "test/*.js"
  },
  "readme": "# Jingle WebRTC\n\n## Example\n\n```js\nvar Jingle = require('jingle');\n\nvar conn = new RealtimeConnection(); // stanza.io, xmpp-ftw, strophe, etc\nvar jingle = new Jingle();\nvar attachMediaStream = require('attachmediastream');\nvar localMedia = require('localMedia');\n\nlocalMedia.on('localStream', function (stream) {\n    attachMediaStream(stream, document.getElementById('localVideo'), {\n        mirror: true,\n        muted: true\n    });\n});\n\n// Capture incoming Jingle data and feed it to the Jingle\n// session manager for processing\nconn.on('data', function (data) {\n    jingle.process(data);\n});\n\n// Capture outgoing Jingle signaling traffic and send it via\n// a realtime connection\njingle.on('send', function (data) {\n    conn.send(data);\n});\n\njingle.on('peerStreamAdded', function (session, stream) {\n    attachMediaStream(stream, document.getElementById('remoteVideo'));\n});\n\n// Answering a call request.\njingle.on('incoming', function (session) {\n    // attach a media stream if desired\n    // session.addStream(localMedia.localStream);\n    session.accept(); // Or display an incoming call banner, etc\n});\n\n// Starting an A/V session.\nlocalMedia.start(null, function (stream) {\n    var sess = jingle.createMediaSession('peer@example.com/resouce');\n    sess.addStream(stream);\n    sess.start();\n});\n```\n## Integrations\n[stanza.io](https://github.com/otalk/stanza.io) and [strophe.jinglejs](https://github.com/sualko/strophe.jinglejs) for integrations of this library.\n\n## Installing\n\n```sh\n$ npm install jingle\n```\n\n## Building bundled/minified version (for AMD, etc)\n\n```sh\n$ make build\n```\n\nThe bundled and minified files will be in the generated `build` directory.\n\n## Documentation\n\n- [API Reference](docs/Reference.md)\n\n## License\n\nMIT\n\n## Created by\n\nIf you like this, follow [@lancestout](http://twitter.com/lancestout) or [@hcornflower](http://twitter.com/hcornflower) on twitter.\n",
  "readmeFilename": "README.md",
  "_id": "jingle@1.7.1",
  "_from": "jingle@^1.5.1"
}
